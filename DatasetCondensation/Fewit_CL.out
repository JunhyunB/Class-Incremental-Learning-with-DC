nohup: ignoring input
Files already downloaded and verified
Files already downloaded and verified

==================================================================================
method:  ours
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5}
use data:  ./../data/metasets/cl_data/cl_herding_CIFAR100_ConvNet_20ipc_5steps_seed0.pt
=========================================
step:  0

-----------------------------
method ours seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([200, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
/opt/conda/envs/idl/lib/python3.10/site-packages/torch/functional.py:504: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at /opt/conda/conda-bld/pytorch_1666642969563/work/aten/src/ATen/native/TensorShape.cpp:3190.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/opt/conda/envs/idl/lib/python3.10/site-packages/torch/nn/functional.py:4289: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.
  warnings.warn(
/opt/conda/envs/idl/lib/python3.10/site-packages/torch/nn/functional.py:4227: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.
  warnings.warn(
[2022-12-06 18:16:37] Evaluate_00: epoch = 1000 train time = 63 s train loss = 0.008166 train acc = 1.0000, test acc = 0.3710
[2022-12-06 18:17:57] Evaluate_01: epoch = 1000 train time = 79 s train loss = 0.011424 train acc = 1.0000, test acc = 0.3785
[2022-12-06 18:19:15] Evaluate_02: epoch = 1000 train time = 76 s train loss = 0.017169 train acc = 1.0000, test acc = 0.3635
Evaluate 3 random ConvNet, mean = 0.3710 std = 0.0061

-----------------------------
method ours seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-12-06 18:21:56] Evaluate_00: epoch = 1000 train time = 155 s train loss = 0.010038 train acc = 1.0000, test acc = 0.3080
[2022-12-06 18:24:35] Evaluate_01: epoch = 1000 train time = 157 s train loss = 0.001581 train acc = 1.0000, test acc = 0.3100
[2022-12-06 18:27:11] Evaluate_02: epoch = 1000 train time = 155 s train loss = 0.006299 train acc = 1.0000, test acc = 0.3105
Evaluate 3 random ConvNet, mean = 0.3095 std = 0.0011

-----------------------------
method ours seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([600, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-12-06 18:31:13] Evaluate_00: epoch = 1000 train time = 234 s train loss = 0.006908 train acc = 1.0000, test acc = 0.2600
[2022-12-06 18:35:12] Evaluate_01: epoch = 1000 train time = 237 s train loss = 0.030119 train acc = 0.9983, test acc = 0.2677
[2022-12-06 18:39:07] Evaluate_02: epoch = 1000 train time = 233 s train loss = 0.005178 train acc = 1.0000, test acc = 0.2677
Evaluate 3 random ConvNet, mean = 0.2651 std = 0.0036

-----------------------------
method ours seed 0 step 3 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-12-06 18:44:28] Evaluate_00: epoch = 1000 train time = 312 s train loss = 0.021316 train acc = 0.9988, test acc = 0.2193
[2022-12-06 18:49:46] Evaluate_01: epoch = 1000 train time = 316 s train loss = 0.026136 train acc = 0.9988, test acc = 0.2274
[2022-12-06 18:54:59] Evaluate_02: epoch = 1000 train time = 311 s train loss = 0.008833 train acc = 1.0000, test acc = 0.2234
Evaluate 3 random ConvNet, mean = 0.2233 std = 0.0033

-----------------------------
method ours seed 0 step 4 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
train data size:  torch.Size([1000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-12-06 19:01:40] Evaluate_00: epoch = 1000 train time = 391 s train loss = 0.020451 train acc = 0.9990, test acc = 0.2005
[2022-12-06 19:08:17] Evaluate_01: epoch = 1000 train time = 394 s train loss = 0.020590 train acc = 1.0000, test acc = 0.2012
[2022-12-06 19:14:53] Evaluate_02: epoch = 1000 train time = 393 s train loss = 0.024073 train acc = 1.0000, test acc = 0.1959
Evaluate 3 random ConvNet, mean = 0.1992 std = 0.0024
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}
use data:  ./../data/metasets/cl_data/Fewit_CIFAR100_ConvNet_10ipc_6steps_seed0.pt
=========================================
step:  5

-----------------------------
method ours seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([200, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-12-06 19:16:14] Evaluate_00: epoch = 1000 train time = 78 s train loss = 0.001352 train acc = 1.0000, test acc = 0.2815
[2022-12-06 19:17:35] Evaluate_01: epoch = 1000 train time = 79 s train loss = 0.008988 train acc = 1.0000, test acc = 0.3010
[2022-12-06 19:18:53] Evaluate_02: epoch = 1000 train time = 77 s train loss = 0.006949 train acc = 1.0000, test acc = 0.3020
Evaluate 3 random ConvNet, mean = 0.2948 std = 0.0094

-----------------------------
method ours seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-12-06 19:21:35] Evaluate_00: epoch = 1000 train time = 156 s train loss = 0.005259 train acc = 1.0000, test acc = 0.2082
[2022-12-06 19:24:13] Evaluate_01: epoch = 1000 train time = 157 s train loss = 0.008958 train acc = 1.0000, test acc = 0.2135
[2022-12-06 19:26:49] Evaluate_02: epoch = 1000 train time = 154 s train loss = 0.013540 train acc = 1.0000, test acc = 0.2107
Evaluate 3 random ConvNet, mean = 0.2108 std = 0.0021

-----------------------------
method ours seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([600, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-12-06 19:30:51] Evaluate_00: epoch = 1000 train time = 235 s train loss = 0.008717 train acc = 1.0000, test acc = 0.1787
[2022-12-06 19:34:50] Evaluate_01: epoch = 1000 train time = 237 s train loss = 0.009316 train acc = 1.0000, test acc = 0.1808
[2022-12-06 19:38:45] Evaluate_02: epoch = 1000 train time = 233 s train loss = 0.004911 train acc = 1.0000, test acc = 0.1808
Evaluate 3 random ConvNet, mean = 0.1801 std = 0.0010

-----------------------------
method ours seed 0 step 3 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-12-06 19:44:06] Evaluate_00: epoch = 1000 train time = 312 s train loss = 0.014315 train acc = 1.0000, test acc = 0.1537
[2022-12-06 19:49:23] Evaluate_01: epoch = 1000 train time = 316 s train loss = 0.014777 train acc = 1.0000, test acc = 0.1569
[2022-12-06 19:54:37] Evaluate_02: epoch = 1000 train time = 312 s train loss = 0.013309 train acc = 1.0000, test acc = 0.1539
Evaluate 3 random ConvNet, mean = 0.1548 std = 0.0014

-----------------------------
method ours seed 0 step 4 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
train data size:  torch.Size([1000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-12-06 20:01:19] Evaluate_00: epoch = 1000 train time = 391 s train loss = 0.017709 train acc = 0.9990, test acc = 0.1279
[2022-12-06 20:07:56] Evaluate_01: epoch = 1000 train time = 395 s train loss = 0.026788 train acc = 0.9980, test acc = 0.1341
[2022-12-06 20:14:32] Evaluate_02: epoch = 1000 train time = 393 s train loss = 0.013773 train acc = 1.0000, test acc = 0.1330
Evaluate 3 random ConvNet, mean = 0.1317 std = 0.0027
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}
use data:  ./../data/metasets/cl_data/Fewit_CIFAR100_ConvNet_10ipc_11steps_seed0.pt
=========================================
step:  10

-----------------------------
method ours seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([200, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-12-06 20:15:54] Evaluate_00: epoch = 1000 train time = 77 s train loss = 0.001158 train acc = 1.0000, test acc = 0.2605
[2022-12-06 20:17:14] Evaluate_01: epoch = 1000 train time = 79 s train loss = 0.001341 train acc = 1.0000, test acc = 0.2630
[2022-12-06 20:18:32] Evaluate_02: epoch = 1000 train time = 77 s train loss = 0.010815 train acc = 1.0000, test acc = 0.2530
Evaluate 3 random ConvNet, mean = 0.2588 std = 0.0042

-----------------------------
method ours seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-12-06 20:21:13] Evaluate_00: epoch = 1000 train time = 155 s train loss = 0.012054 train acc = 1.0000, test acc = 0.1665
[2022-12-06 20:23:52] Evaluate_01: epoch = 1000 train time = 158 s train loss = 0.048811 train acc = 1.0000, test acc = 0.1698
[2022-12-06 20:26:28] Evaluate_02: epoch = 1000 train time = 155 s train loss = 0.026974 train acc = 1.0000, test acc = 0.1698
Evaluate 3 random ConvNet, mean = 0.1687 std = 0.0015

-----------------------------
method ours seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([600, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-12-06 20:30:30] Evaluate_00: epoch = 1000 train time = 235 s train loss = 0.020524 train acc = 1.0000, test acc = 0.1508
[2022-12-06 20:34:29] Evaluate_01: epoch = 1000 train time = 237 s train loss = 0.005679 train acc = 1.0000, test acc = 0.1498
[2022-12-06 20:38:24] Evaluate_02: epoch = 1000 train time = 234 s train loss = 0.004161 train acc = 1.0000, test acc = 0.1543
Evaluate 3 random ConvNet, mean = 0.1517 std = 0.0019

-----------------------------
method ours seed 0 step 3 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-12-06 20:43:46] Evaluate_00: epoch = 1000 train time = 313 s train loss = 0.023197 train acc = 1.0000, test acc = 0.1237
[2022-12-06 20:49:03] Evaluate_01: epoch = 1000 train time = 315 s train loss = 0.018954 train acc = 1.0000, test acc = 0.1235
[2022-12-06 20:54:17] Evaluate_02: epoch = 1000 train time = 312 s train loss = 0.019215 train acc = 0.9975, test acc = 0.1291
Evaluate 3 random ConvNet, mean = 0.1255 std = 0.0026

-----------------------------
method ours seed 0 step 4 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
train data size:  torch.Size([1000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-12-06 21:00:59] Evaluate_00: epoch = 1000 train time = 391 s train loss = 0.018193 train acc = 0.9990, test acc = 0.1121
[2022-12-06 21:07:36] Evaluate_01: epoch = 1000 train time = 395 s train loss = 0.017471 train acc = 1.0000, test acc = 0.1092
[2022-12-06 21:14:12] Evaluate_02: epoch = 1000 train time = 393 s train loss = 0.007657 train acc = 0.9990, test acc = 0.1176
Evaluate 3 random ConvNet, mean = 0.1130 std = 0.0035
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}
use data:  ./../data/metasets/cl_data/Fewit_CIFAR100_ConvNet_10ipc_21steps_seed0.pt
=========================================
step:  20

-----------------------------
method ours seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([200, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-12-06 21:15:34] Evaluate_00: epoch = 1000 train time = 77 s train loss = 0.021613 train acc = 1.0000, test acc = 0.1820
[2022-12-06 21:16:54] Evaluate_01: epoch = 1000 train time = 79 s train loss = 0.002279 train acc = 1.0000, test acc = 0.1900
[2022-12-06 21:18:12] Evaluate_02: epoch = 1000 train time = 77 s train loss = 0.001435 train acc = 1.0000, test acc = 0.1960
Evaluate 3 random ConvNet, mean = 0.1893 std = 0.0057

-----------------------------
method ours seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-12-06 21:20:53] Evaluate_00: epoch = 1000 train time = 155 s train loss = 0.001531 train acc = 1.0000, test acc = 0.1310
[2022-12-06 21:23:31] Evaluate_01: epoch = 1000 train time = 157 s train loss = 0.025483 train acc = 0.9950, test acc = 0.1385
[2022-12-06 21:26:07] Evaluate_02: epoch = 1000 train time = 155 s train loss = 0.020231 train acc = 1.0000, test acc = 0.1353
Evaluate 3 random ConvNet, mean = 0.1349 std = 0.0031

-----------------------------
method ours seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([600, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-12-06 21:30:09] Evaluate_00: epoch = 1000 train time = 234 s train loss = 0.009453 train acc = 1.0000, test acc = 0.1097
[2022-12-06 21:34:08] Evaluate_01: epoch = 1000 train time = 237 s train loss = 0.005852 train acc = 1.0000, test acc = 0.1023
[2022-12-06 21:38:03] Evaluate_02: epoch = 1000 train time = 234 s train loss = 0.026113 train acc = 1.0000, test acc = 0.1112
Evaluate 3 random ConvNet, mean = 0.1077 std = 0.0039

-----------------------------
method ours seed 0 step 3 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-12-06 21:43:25] Evaluate_00: epoch = 1000 train time = 313 s train loss = 0.046298 train acc = 0.9988, test acc = 0.0892
[2022-12-06 21:48:42] Evaluate_01: epoch = 1000 train time = 316 s train loss = 0.020470 train acc = 0.9988, test acc = 0.0965
[2022-12-06 21:53:56] Evaluate_02: epoch = 1000 train time = 312 s train loss = 0.010297 train acc = 1.0000, test acc = 0.0963
Evaluate 3 random ConvNet, mean = 0.0940 std = 0.0034

-----------------------------
method ours seed 0 step 4 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
train data size:  torch.Size([1000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-12-06 22:00:39] Evaluate_00: epoch = 1000 train time = 393 s train loss = 0.012914 train acc = 1.0000, test acc = 0.0789
[2022-12-06 22:07:16] Evaluate_01: epoch = 1000 train time = 395 s train loss = 0.012757 train acc = 1.0000, test acc = 0.0819
[2022-12-06 22:13:52] Evaluate_02: epoch = 1000 train time = 393 s train loss = 0.020820 train acc = 0.9990, test acc = 0.0830
Evaluate 3 random ConvNet, mean = 0.0813 std = 0.0017
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}
use data:  ./../data/metasets/cl_data/Fewit_CIFAR100_ConvNet_10ipc_31steps_seed0.pt
=========================================
step:  30

-----------------------------
method ours seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([200, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-12-06 22:15:14] Evaluate_00: epoch = 1000 train time = 78 s train loss = 0.001338 train acc = 1.0000, test acc = 0.1640
[2022-12-06 22:16:34] Evaluate_01: epoch = 1000 train time = 79 s train loss = 0.016289 train acc = 1.0000, test acc = 0.1690
[2022-12-06 22:17:53] Evaluate_02: epoch = 1000 train time = 77 s train loss = 0.001260 train acc = 1.0000, test acc = 0.1530
Evaluate 3 random ConvNet, mean = 0.1620 std = 0.0067

-----------------------------
method ours seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-12-06 22:20:35] Evaluate_00: epoch = 1000 train time = 157 s train loss = 0.005924 train acc = 1.0000, test acc = 0.1080
[2022-12-06 22:23:14] Evaluate_01: epoch = 1000 train time = 158 s train loss = 0.030343 train acc = 1.0000, test acc = 0.1072
[2022-12-06 22:25:50] Evaluate_02: epoch = 1000 train time = 155 s train loss = 0.013675 train acc = 0.9975, test acc = 0.1070
Evaluate 3 random ConvNet, mean = 0.1074 std = 0.0004

-----------------------------
method ours seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([600, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-12-06 22:29:54] Evaluate_00: epoch = 1000 train time = 237 s train loss = 0.010165 train acc = 1.0000, test acc = 0.0950
[2022-12-06 22:33:54] Evaluate_01: epoch = 1000 train time = 237 s train loss = 0.002277 train acc = 1.0000, test acc = 0.0888
[2022-12-06 22:37:48] Evaluate_02: epoch = 1000 train time = 233 s train loss = 0.005522 train acc = 1.0000, test acc = 0.0948
Evaluate 3 random ConvNet, mean = 0.0929 std = 0.0029

-----------------------------
method ours seed 0 step 3 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-12-06 22:43:12] Evaluate_00: epoch = 1000 train time = 315 s train loss = 0.026135 train acc = 0.9988, test acc = 0.0813
[2022-12-06 22:48:30] Evaluate_01: epoch = 1000 train time = 316 s train loss = 0.041130 train acc = 0.9988, test acc = 0.0848
[2022-12-06 22:53:41] Evaluate_02: epoch = 1000 train time = 309 s train loss = 0.039695 train acc = 0.9988, test acc = 0.0831
Evaluate 3 random ConvNet, mean = 0.0830 std = 0.0014

-----------------------------
method ours seed 0 step 4 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
train data size:  torch.Size([1000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-12-06 23:00:26] Evaluate_00: epoch = 1000 train time = 395 s train loss = 0.024057 train acc = 1.0000, test acc = 0.0695
[2022-12-06 23:07:04] Evaluate_01: epoch = 1000 train time = 395 s train loss = 0.008140 train acc = 0.9990, test acc = 0.0684
[2022-12-06 23:13:38] Evaluate_02: epoch = 1000 train time = 392 s train loss = 0.020985 train acc = 1.0000, test acc = 0.0703
Evaluate 3 random ConvNet, mean = 0.0694 std = 0.0008
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}
use data:  ./../data/metasets/cl_data/Fewit_CIFAR100_ConvNet_10ipc_41steps_seed0.pt
=========================================
step:  40

-----------------------------
method ours seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([200, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-12-06 23:15:02] Evaluate_00: epoch = 1000 train time = 79 s train loss = 0.013784 train acc = 1.0000, test acc = 0.1545
[2022-12-06 23:16:22] Evaluate_01: epoch = 1000 train time = 79 s train loss = 0.011910 train acc = 1.0000, test acc = 0.1335
[2022-12-06 23:17:38] Evaluate_02: epoch = 1000 train time = 75 s train loss = 0.027154 train acc = 0.9950, test acc = 0.1405
Evaluate 3 random ConvNet, mean = 0.1428 std = 0.0087

-----------------------------
method ours seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-12-06 23:20:21] Evaluate_00: epoch = 1000 train time = 158 s train loss = 0.034646 train acc = 1.0000, test acc = 0.0948
[2022-12-06 23:23:00] Evaluate_01: epoch = 1000 train time = 158 s train loss = 0.001622 train acc = 1.0000, test acc = 0.1067
[2022-12-06 23:25:33] Evaluate_02: epoch = 1000 train time = 152 s train loss = 0.007877 train acc = 1.0000, test acc = 0.0973
Evaluate 3 random ConvNet, mean = 0.0996 std = 0.0052

-----------------------------
method ours seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([600, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-12-06 23:29:38] Evaluate_00: epoch = 1000 train time = 237 s train loss = 0.009309 train acc = 1.0000, test acc = 0.0798
[2022-12-06 23:33:37] Evaluate_01: epoch = 1000 train time = 237 s train loss = 0.020369 train acc = 0.9967, test acc = 0.0798
[2022-12-06 23:37:28] Evaluate_02: epoch = 1000 train time = 230 s train loss = 0.017270 train acc = 1.0000, test acc = 0.0793
Evaluate 3 random ConvNet, mean = 0.0797 std = 0.0002

-----------------------------
method ours seed 0 step 3 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-12-06 23:42:53] Evaluate_00: epoch = 1000 train time = 315 s train loss = 0.041208 train acc = 1.0000, test acc = 0.0689
[2022-12-06 23:48:11] Evaluate_01: epoch = 1000 train time = 316 s train loss = 0.025157 train acc = 0.9975, test acc = 0.0706
[2022-12-06 23:53:21] Evaluate_02: epoch = 1000 train time = 309 s train loss = 0.010303 train acc = 0.9988, test acc = 0.0719
Evaluate 3 random ConvNet, mean = 0.0705 std = 0.0012

-----------------------------
method ours seed 0 step 4 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
train data size:  torch.Size([1000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-12-07 00:00:06] Evaluate_00: epoch = 1000 train time = 395 s train loss = 0.029652 train acc = 0.9980, test acc = 0.0574
[2022-12-07 00:06:44] Evaluate_01: epoch = 1000 train time = 395 s train loss = 0.015598 train acc = 0.9980, test acc = 0.0610
[2022-12-07 00:13:18] Evaluate_02: epoch = 1000 train time = 392 s train loss = 0.008069 train acc = 1.0000, test acc = 0.0601
Evaluate 3 random ConvNet, mean = 0.0595 std = 0.0015
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}
use data:  ./../data/metasets/cl_data/Fewit_CIFAR100_ConvNet_10ipc_51steps_seed0.pt
=========================================
step:  50

-----------------------------
method ours seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([200, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-12-07 00:14:42] Evaluate_00: epoch = 1000 train time = 80 s train loss = 0.001635 train acc = 1.0000, test acc = 0.1330
[2022-12-07 00:16:00] Evaluate_01: epoch = 1000 train time = 77 s train loss = 0.007455 train acc = 1.0000, test acc = 0.1440
[2022-12-07 00:17:17] Evaluate_02: epoch = 1000 train time = 77 s train loss = 0.001685 train acc = 1.0000, test acc = 0.1380
Evaluate 3 random ConvNet, mean = 0.1383 std = 0.0045

-----------------------------
method ours seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-12-07 00:20:01] Evaluate_00: epoch = 1000 train time = 158 s train loss = 0.023775 train acc = 1.0000, test acc = 0.0810
[2022-12-07 00:22:40] Evaluate_01: epoch = 1000 train time = 158 s train loss = 0.002858 train acc = 1.0000, test acc = 0.0887
[2022-12-07 00:25:13] Evaluate_02: epoch = 1000 train time = 152 s train loss = 0.003675 train acc = 1.0000, test acc = 0.0867
Evaluate 3 random ConvNet, mean = 0.0855 std = 0.0033

-----------------------------
method ours seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([600, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-12-07 00:29:18] Evaluate_00: epoch = 1000 train time = 237 s train loss = 0.028067 train acc = 1.0000, test acc = 0.0727
[2022-12-07 00:33:17] Evaluate_01: epoch = 1000 train time = 238 s train loss = 0.023659 train acc = 1.0000, test acc = 0.0695
[2022-12-07 00:37:09] Evaluate_02: epoch = 1000 train time = 230 s train loss = 0.020248 train acc = 1.0000, test acc = 0.0763
Evaluate 3 random ConvNet, mean = 0.0728 std = 0.0028

-----------------------------
method ours seed 0 step 3 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-12-07 00:42:33] Evaluate_00: epoch = 1000 train time = 316 s train loss = 0.014938 train acc = 0.9988, test acc = 0.0664
[2022-12-07 00:47:51] Evaluate_01: epoch = 1000 train time = 316 s train loss = 0.011599 train acc = 1.0000, test acc = 0.0679
[2022-12-07 00:53:02] Evaluate_02: epoch = 1000 train time = 308 s train loss = 0.016866 train acc = 0.9975, test acc = 0.0670
Evaluate 3 random ConvNet, mean = 0.0671 std = 0.0006

-----------------------------
method ours seed 0 step 4 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
train data size:  torch.Size([1000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-12-07 00:59:47] Evaluate_00: epoch = 1000 train time = 395 s train loss = 0.002552 train acc = 1.0000, test acc = 0.0570
[2022-12-07 01:06:24] Evaluate_01: epoch = 1000 train time = 395 s train loss = 0.012368 train acc = 1.0000, test acc = 0.0572
[2022-12-07 01:12:58] Evaluate_02: epoch = 1000 train time = 392 s train loss = 0.008508 train acc = 1.0000, test acc = 0.0591
Evaluate 3 random ConvNet, mean = 0.0578 std = 0.0009
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}
use data:  ./../data/metasets/cl_data/Fewit_CIFAR100_ConvNet_10ipc_61steps_seed0.pt
=========================================
step:  60

-----------------------------
method ours seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([200, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-12-07 01:14:22] Evaluate_00: epoch = 1000 train time = 79 s train loss = 0.001766 train acc = 1.0000, test acc = 0.1320
[2022-12-07 01:15:40] Evaluate_01: epoch = 1000 train time = 77 s train loss = 0.019355 train acc = 1.0000, test acc = 0.1305
[2022-12-07 01:16:58] Evaluate_02: epoch = 1000 train time = 77 s train loss = 0.001975 train acc = 1.0000, test acc = 0.1290
Evaluate 3 random ConvNet, mean = 0.1305 std = 0.0012

-----------------------------
method ours seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-12-07 01:19:41] Evaluate_00: epoch = 1000 train time = 158 s train loss = 0.004519 train acc = 1.0000, test acc = 0.0843
[2022-12-07 01:22:20] Evaluate_01: epoch = 1000 train time = 158 s train loss = 0.004866 train acc = 1.0000, test acc = 0.0850
[2022-12-07 01:24:53] Evaluate_02: epoch = 1000 train time = 151 s train loss = 0.035406 train acc = 0.9950, test acc = 0.0855
Evaluate 3 random ConvNet, mean = 0.0849 std = 0.0005

-----------------------------
method ours seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([600, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-12-07 01:28:58] Evaluate_00: epoch = 1000 train time = 238 s train loss = 0.025822 train acc = 1.0000, test acc = 0.0708
[2022-12-07 01:32:57] Evaluate_01: epoch = 1000 train time = 237 s train loss = 0.016738 train acc = 1.0000, test acc = 0.0707
[2022-12-07 01:36:49] Evaluate_02: epoch = 1000 train time = 230 s train loss = 0.032962 train acc = 0.9983, test acc = 0.0713
Evaluate 3 random ConvNet, mean = 0.0709 std = 0.0003

-----------------------------
method ours seed 0 step 3 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-12-07 01:42:13] Evaluate_00: epoch = 1000 train time = 316 s train loss = 0.012436 train acc = 1.0000, test acc = 0.0626
[2022-12-07 01:47:31] Evaluate_01: epoch = 1000 train time = 315 s train loss = 0.023779 train acc = 1.0000, test acc = 0.0621
[2022-12-07 01:52:41] Evaluate_02: epoch = 1000 train time = 309 s train loss = 0.012628 train acc = 0.9988, test acc = 0.0634
Evaluate 3 random ConvNet, mean = 0.0627 std = 0.0005

-----------------------------
method ours seed 0 step 4 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
train data size:  torch.Size([1000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-12-07 01:59:28] Evaluate_00: epoch = 1000 train time = 396 s train loss = 0.014419 train acc = 1.0000, test acc = 0.0551
[2022-12-07 02:06:05] Evaluate_01: epoch = 1000 train time = 395 s train loss = 0.008517 train acc = 1.0000, test acc = 0.0520
[2022-12-07 02:12:39] Evaluate_02: epoch = 1000 train time = 392 s train loss = 0.006999 train acc = 1.0000, test acc = 0.0516
Evaluate 3 random ConvNet, mean = 0.0529 std = 0.0016
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}
use data:  ./../data/metasets/cl_data/Fewit_CIFAR100_ConvNet_10ipc_71steps_seed0.pt
=========================================
step:  70

-----------------------------
method ours seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([200, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-12-07 02:14:03] Evaluate_00: epoch = 1000 train time = 79 s train loss = 0.002271 train acc = 1.0000, test acc = 0.1290
[2022-12-07 02:15:21] Evaluate_01: epoch = 1000 train time = 77 s train loss = 0.012591 train acc = 1.0000, test acc = 0.1210
[2022-12-07 02:16:38] Evaluate_02: epoch = 1000 train time = 76 s train loss = 0.009140 train acc = 1.0000, test acc = 0.1210
Evaluate 3 random ConvNet, mean = 0.1237 std = 0.0038

-----------------------------
method ours seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-12-07 02:19:22] Evaluate_00: epoch = 1000 train time = 158 s train loss = 0.004863 train acc = 1.0000, test acc = 0.0767
[2022-12-07 02:22:06] Evaluate_01: epoch = 1000 train time = 163 s train loss = 0.023811 train acc = 1.0000, test acc = 0.0737
[2022-12-07 02:24:39] Evaluate_02: epoch = 1000 train time = 152 s train loss = 0.018999 train acc = 1.0000, test acc = 0.0755
Evaluate 3 random ConvNet, mean = 0.0753 std = 0.0012

-----------------------------
method ours seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([600, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-12-07 02:28:44] Evaluate_00: epoch = 1000 train time = 237 s train loss = 0.016238 train acc = 0.9983, test acc = 0.0692
[2022-12-07 02:32:43] Evaluate_01: epoch = 1000 train time = 238 s train loss = 0.002772 train acc = 1.0000, test acc = 0.0658
[2022-12-07 02:36:35] Evaluate_02: epoch = 1000 train time = 230 s train loss = 0.006803 train acc = 1.0000, test acc = 0.0673
Evaluate 3 random ConvNet, mean = 0.0674 std = 0.0014

-----------------------------
method ours seed 0 step 3 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-12-07 02:42:00] Evaluate_00: epoch = 1000 train time = 316 s train loss = 0.045352 train acc = 1.0000, test acc = 0.0579
[2022-12-07 02:47:18] Evaluate_01: epoch = 1000 train time = 316 s train loss = 0.048796 train acc = 0.9975, test acc = 0.0586
[2022-12-07 02:52:29] Evaluate_02: epoch = 1000 train time = 309 s train loss = 0.018970 train acc = 1.0000, test acc = 0.0592
Evaluate 3 random ConvNet, mean = 0.0586 std = 0.0006

-----------------------------
method ours seed 0 step 4 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
train data size:  torch.Size([1000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-12-07 02:59:32] Evaluate_00: epoch = 1000 train time = 413 s train loss = 0.039880 train acc = 0.9990, test acc = 0.0491
[2022-12-07 03:06:51] Evaluate_01: epoch = 1000 train time = 436 s train loss = 0.014814 train acc = 1.0000, test acc = 0.0481
[2022-12-07 03:15:11] Evaluate_02: epoch = 1000 train time = 497 s train loss = 0.049970 train acc = 0.9970, test acc = 0.0539
Evaluate 3 random ConvNet, mean = 0.0504 std = 0.0025
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}
use data:  ./../data/metasets/cl_data/Fewit_CIFAR100_ConvNet_10ipc_81steps_seed0.pt
=========================================
step:  80

-----------------------------
method ours seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([200, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-12-07 03:16:56] Evaluate_00: epoch = 1000 train time = 100 s train loss = 0.051910 train acc = 1.0000, test acc = 0.1200
[2022-12-07 03:18:36] Evaluate_01: epoch = 1000 train time = 99 s train loss = 0.035643 train acc = 1.0000, test acc = 0.1185
[2022-12-07 03:20:16] Evaluate_02: epoch = 1000 train time = 99 s train loss = 0.001923 train acc = 1.0000, test acc = 0.1215
Evaluate 3 random ConvNet, mean = 0.1200 std = 0.0012

-----------------------------
method ours seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-12-07 03:23:43] Evaluate_00: epoch = 1000 train time = 201 s train loss = 0.007746 train acc = 1.0000, test acc = 0.0740
[2022-12-07 03:27:05] Evaluate_01: epoch = 1000 train time = 200 s train loss = 0.029024 train acc = 1.0000, test acc = 0.0735
[2022-12-07 03:30:22] Evaluate_02: epoch = 1000 train time = 195 s train loss = 0.007208 train acc = 1.0000, test acc = 0.0767
Evaluate 3 random ConvNet, mean = 0.0747 std = 0.0014

-----------------------------
method ours seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([600, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
