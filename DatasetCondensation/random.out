nohup: ignoring input
Files already downloaded and verified
Files already downloaded and verified

==================================================================================
method:  random
=========================================
seed:  0
class_order:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5}

-----------------------------
method random seed 0 step 0 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
/opt/conda/envs/idl/lib/python3.10/site-packages/torch/nn/functional.py:4289: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.
  warnings.warn(
/opt/conda/envs/idl/lib/python3.10/site-packages/torch/nn/functional.py:4227: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.
  warnings.warn(
/opt/conda/envs/idl/lib/python3.10/site-packages/torch/functional.py:504: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at /opt/conda/conda-bld/pytorch_1666642969563/work/aten/src/ATen/native/TensorShape.cpp:3190.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[2022-11-29 15:28:18] Evaluate_00: epoch = 1000 train time = 50 s train loss = 0.002751 train acc = 1.0000, test acc = 0.4205
[2022-11-29 15:29:08] Evaluate_01: epoch = 1000 train time = 49 s train loss = 0.011404 train acc = 1.0000, test acc = 0.4185
[2022-11-29 15:29:58] Evaluate_02: epoch = 1000 train time = 49 s train loss = 0.011196 train acc = 1.0000, test acc = 0.4165
Evaluate 3 random ConvNet, mean = 0.4185 std = 0.0016

-----------------------------
method random seed 0 step 1 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-11-29 15:31:43] Evaluate_00: epoch = 1000 train time = 101 s train loss = 0.015631 train acc = 1.0000, test acc = 0.3645
[2022-11-29 15:33:24] Evaluate_01: epoch = 1000 train time = 100 s train loss = 0.020853 train acc = 0.9988, test acc = 0.3575
[2022-11-29 15:35:07] Evaluate_02: epoch = 1000 train time = 102 s train loss = 0.012457 train acc = 1.0000, test acc = 0.3593
Evaluate 3 random ConvNet, mean = 0.3604 std = 0.0030

-----------------------------
method random seed 0 step 2 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52]
train data size:  torch.Size([1200, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-11-29 15:39:49] Evaluate_00: epoch = 1000 train time = 277 s train loss = 0.017843 train acc = 1.0000, test acc = 0.3252
[2022-11-29 15:44:55] Evaluate_01: epoch = 1000 train time = 304 s train loss = 0.011802 train acc = 1.0000, test acc = 0.3228
[2022-11-29 15:49:45] Evaluate_02: epoch = 1000 train time = 289 s train loss = 0.009058 train acc = 1.0000, test acc = 0.3215
Evaluate 3 random ConvNet, mean = 0.3232 std = 0.0015

-----------------------------
method random seed 0 step 3 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77]
train data size:  torch.Size([1600, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-11-29 15:57:23] Evaluate_00: epoch = 1000 train time = 451 s train loss = 0.007940 train acc = 1.0000, test acc = 0.2833
[2022-11-29 16:04:52] Evaluate_01: epoch = 1000 train time = 448 s train loss = 0.026247 train acc = 0.9981, test acc = 0.2774
[2022-11-29 16:12:08] Evaluate_02: epoch = 1000 train time = 434 s train loss = 0.013941 train acc = 0.9994, test acc = 0.2821
Evaluate 3 random ConvNet, mean = 0.2809 std = 0.0025

-----------------------------
method random seed 0 step 4 
classes_seen:  [26, 86, 2, 55, 75, 93, 16, 73, 54, 95, 53, 92, 78, 13, 7, 30, 22, 24, 33, 8, 43, 62, 3, 71, 45, 48, 6, 99, 82, 76, 60, 80, 90, 68, 51, 27, 18, 56, 63, 74, 1, 61, 42, 41, 4, 15, 17, 40, 38, 5, 91, 59, 0, 34, 28, 50, 11, 35, 23, 52, 10, 31, 66, 57, 79, 85, 32, 84, 14, 89, 19, 29, 49, 97, 98, 69, 20, 94, 72, 77, 25, 37, 81, 46, 39, 65, 58, 12, 88, 70, 87, 36, 21, 83, 9, 96, 67, 64, 47, 44]
train data size:  torch.Size([2000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-11-29 16:21:40] Evaluate_00: epoch = 1000 train time = 563 s train loss = 0.015088 train acc = 0.9995, test acc = 0.2455
[2022-11-29 16:30:44] Evaluate_01: epoch = 1000 train time = 543 s train loss = 0.015968 train acc = 0.9985, test acc = 0.2473
[2022-11-29 16:39:49] Evaluate_02: epoch = 1000 train time = 543 s train loss = 0.014795 train acc = 0.9995, test acc = 0.2542
Evaluate 3 random ConvNet, mean = 0.2490 std = 0.0037
=========================================
seed:  1
class_order:  [80, 84, 33, 81, 93, 17, 36, 82, 69, 65, 92, 39, 56, 52, 51, 32, 31, 44, 78, 10, 2, 73, 97, 62, 19, 35, 94, 27, 46, 38, 67, 99, 54, 95, 88, 40, 48, 59, 23, 34, 86, 53, 77, 15, 83, 41, 45, 91, 26, 98, 43, 55, 24, 4, 58, 49, 21, 87, 3, 74, 30, 66, 70, 42, 47, 89, 8, 60, 0, 90, 57, 22, 61, 63, 7, 96, 13, 68, 85, 14, 29, 28, 11, 18, 20, 50, 25, 6, 71, 76, 1, 16, 64, 79, 5, 75, 9, 72, 12, 37]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}

-----------------------------
method random seed 1 step 0 
classes_seen:  [80, 84, 33, 81, 93, 17, 36, 82, 69, 65, 92, 39, 56, 52, 51, 32, 31, 44, 78, 10]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-11-29 16:41:40] Evaluate_00: epoch = 1000 train time = 107 s train loss = 0.001092 train acc = 1.0000, test acc = 0.4235
[2022-11-29 16:43:37] Evaluate_01: epoch = 1000 train time = 116 s train loss = 0.015255 train acc = 1.0000, test acc = 0.4195
[2022-11-29 16:45:33] Evaluate_02: epoch = 1000 train time = 116 s train loss = 0.008969 train acc = 1.0000, test acc = 0.4210
Evaluate 3 random ConvNet, mean = 0.4213 std = 0.0016

-----------------------------
method random seed 1 step 1 
classes_seen:  [80, 84, 33, 81, 93, 17, 36, 82, 69, 65, 92, 39, 56, 52, 51, 32, 31, 44, 78, 10, 2, 73, 97, 62, 19, 35, 94, 27, 46, 38, 67, 99, 54, 95, 88, 40, 48, 59, 23, 34]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-11-29 16:49:30] Evaluate_00: epoch = 1000 train time = 232 s train loss = 0.018537 train acc = 0.9962, test acc = 0.3137
[2022-11-29 16:53:22] Evaluate_01: epoch = 1000 train time = 231 s train loss = 0.019737 train acc = 1.0000, test acc = 0.3127
[2022-11-29 16:57:14] Evaluate_02: epoch = 1000 train time = 230 s train loss = 0.015983 train acc = 0.9988, test acc = 0.3080
Evaluate 3 random ConvNet, mean = 0.3115 std = 0.0025

-----------------------------
method random seed 1 step 2 
classes_seen:  [80, 84, 33, 81, 93, 17, 36, 82, 69, 65, 92, 39, 56, 52, 51, 32, 31, 44, 78, 10, 2, 73, 97, 62, 19, 35, 94, 27, 46, 38, 67, 99, 54, 95, 88, 40, 48, 59, 23, 34, 86, 53, 77, 15, 83, 41, 45, 91, 26, 98, 43, 55, 24, 4, 58, 49, 21, 87, 3, 74]
train data size:  torch.Size([1200, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-11-29 17:02:50] Evaluate_00: epoch = 1000 train time = 331 s train loss = 0.020594 train acc = 1.0000, test acc = 0.2783
[2022-11-29 17:08:17] Evaluate_01: epoch = 1000 train time = 326 s train loss = 0.022408 train acc = 0.9983, test acc = 0.2848
[2022-11-29 17:13:29] Evaluate_02: epoch = 1000 train time = 310 s train loss = 0.020697 train acc = 0.9975, test acc = 0.2852
Evaluate 3 random ConvNet, mean = 0.2828 std = 0.0031

-----------------------------
method random seed 1 step 3 
classes_seen:  [80, 84, 33, 81, 93, 17, 36, 82, 69, 65, 92, 39, 56, 52, 51, 32, 31, 44, 78, 10, 2, 73, 97, 62, 19, 35, 94, 27, 46, 38, 67, 99, 54, 95, 88, 40, 48, 59, 23, 34, 86, 53, 77, 15, 83, 41, 45, 91, 26, 98, 43, 55, 24, 4, 58, 49, 21, 87, 3, 74, 30, 66, 70, 42, 47, 89, 8, 60, 0, 90, 57, 22, 61, 63, 7, 96, 13, 68, 85, 14]
train data size:  torch.Size([1600, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-11-29 17:20:30] Evaluate_00: epoch = 1000 train time = 414 s train loss = 0.019448 train acc = 0.9994, test acc = 0.2645
[2022-11-29 17:27:40] Evaluate_01: epoch = 1000 train time = 429 s train loss = 0.027569 train acc = 1.0000, test acc = 0.2659
[2022-11-29 17:35:11] Evaluate_02: epoch = 1000 train time = 449 s train loss = 0.013870 train acc = 0.9994, test acc = 0.2654
Evaluate 3 random ConvNet, mean = 0.2653 std = 0.0006

-----------------------------
method random seed 1 step 4 
classes_seen:  [80, 84, 33, 81, 93, 17, 36, 82, 69, 65, 92, 39, 56, 52, 51, 32, 31, 44, 78, 10, 2, 73, 97, 62, 19, 35, 94, 27, 46, 38, 67, 99, 54, 95, 88, 40, 48, 59, 23, 34, 86, 53, 77, 15, 83, 41, 45, 91, 26, 98, 43, 55, 24, 4, 58, 49, 21, 87, 3, 74, 30, 66, 70, 42, 47, 89, 8, 60, 0, 90, 57, 22, 61, 63, 7, 96, 13, 68, 85, 14, 29, 28, 11, 18, 20, 50, 25, 6, 71, 76, 1, 16, 64, 79, 5, 75, 9, 72, 12, 37]
train data size:  torch.Size([2000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-11-29 17:44:30] Evaluate_00: epoch = 1000 train time = 551 s train loss = 0.020107 train acc = 0.9985, test acc = 0.2402
[2022-11-29 17:53:59] Evaluate_01: epoch = 1000 train time = 567 s train loss = 0.028632 train acc = 0.9985, test acc = 0.2433
[2022-11-29 18:03:04] Evaluate_02: epoch = 1000 train time = 543 s train loss = 0.018816 train acc = 0.9995, test acc = 0.2441
Evaluate 3 random ConvNet, mean = 0.2425 std = 0.0017
=========================================
seed:  2
class_order:  [83, 30, 56, 24, 16, 23, 2, 27, 28, 13, 99, 92, 76, 14, 0, 21, 3, 29, 61, 79, 35, 11, 84, 44, 73, 5, 25, 77, 74, 62, 65, 1, 18, 48, 36, 78, 6, 89, 91, 10, 12, 53, 87, 54, 95, 32, 19, 26, 60, 55, 9, 96, 17, 59, 57, 41, 64, 45, 97, 8, 71, 94, 90, 98, 86, 80, 50, 52, 66, 88, 70, 46, 68, 69, 81, 58, 33, 38, 51, 42, 4, 67, 39, 37, 20, 31, 63, 47, 85, 93, 49, 34, 7, 75, 82, 43, 22, 72, 15, 40]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}

-----------------------------
method random seed 2 step 0 
classes_seen:  [83, 30, 56, 24, 16, 23, 2, 27, 28, 13, 99, 92, 76, 14, 0, 21, 3, 29, 61, 79]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-11-29 18:04:56] Evaluate_00: epoch = 1000 train time = 107 s train loss = 0.002742 train acc = 1.0000, test acc = 0.4645
[2022-11-29 18:06:50] Evaluate_01: epoch = 1000 train time = 113 s train loss = 0.008254 train acc = 1.0000, test acc = 0.4725
[2022-11-29 18:08:46] Evaluate_02: epoch = 1000 train time = 116 s train loss = 0.005850 train acc = 1.0000, test acc = 0.4660
Evaluate 3 random ConvNet, mean = 0.4677 std = 0.0035

-----------------------------
method random seed 2 step 1 
classes_seen:  [83, 30, 56, 24, 16, 23, 2, 27, 28, 13, 99, 92, 76, 14, 0, 21, 3, 29, 61, 79, 35, 11, 84, 44, 73, 5, 25, 77, 74, 62, 65, 1, 18, 48, 36, 78, 6, 89, 91, 10]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-11-29 18:12:43] Evaluate_00: epoch = 1000 train time = 232 s train loss = 0.015727 train acc = 0.9988, test acc = 0.3080
[2022-11-29 18:16:36] Evaluate_01: epoch = 1000 train time = 232 s train loss = 0.006455 train acc = 1.0000, test acc = 0.3120
[2022-11-29 18:20:29] Evaluate_02: epoch = 1000 train time = 232 s train loss = 0.018969 train acc = 0.9988, test acc = 0.3190
Evaluate 3 random ConvNet, mean = 0.3130 std = 0.0045

-----------------------------
method random seed 2 step 2 
classes_seen:  [83, 30, 56, 24, 16, 23, 2, 27, 28, 13, 99, 92, 76, 14, 0, 21, 3, 29, 61, 79, 35, 11, 84, 44, 73, 5, 25, 77, 74, 62, 65, 1, 18, 48, 36, 78, 6, 89, 91, 10, 12, 53, 87, 54, 95, 32, 19, 26, 60, 55, 9, 96, 17, 59, 57, 41, 64, 45, 97, 8]
train data size:  torch.Size([1200, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-11-29 18:26:15] Evaluate_00: epoch = 1000 train time = 340 s train loss = 0.021869 train acc = 1.0000, test acc = 0.2897
[2022-11-29 18:31:52] Evaluate_01: epoch = 1000 train time = 335 s train loss = 0.014555 train acc = 0.9992, test acc = 0.2875
[2022-11-29 18:37:04] Evaluate_02: epoch = 1000 train time = 311 s train loss = 0.009077 train acc = 1.0000, test acc = 0.2915
Evaluate 3 random ConvNet, mean = 0.2896 std = 0.0016

-----------------------------
method random seed 2 step 3 
classes_seen:  [83, 30, 56, 24, 16, 23, 2, 27, 28, 13, 99, 92, 76, 14, 0, 21, 3, 29, 61, 79, 35, 11, 84, 44, 73, 5, 25, 77, 74, 62, 65, 1, 18, 48, 36, 78, 6, 89, 91, 10, 12, 53, 87, 54, 95, 32, 19, 26, 60, 55, 9, 96, 17, 59, 57, 41, 64, 45, 97, 8, 71, 94, 90, 98, 86, 80, 50, 52, 66, 88, 70, 46, 68, 69, 81, 58, 33, 38, 51, 42]
train data size:  torch.Size([1600, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-11-29 18:44:36] Evaluate_00: epoch = 1000 train time = 446 s train loss = 0.014010 train acc = 0.9988, test acc = 0.2641
[2022-11-29 18:52:04] Evaluate_01: epoch = 1000 train time = 446 s train loss = 0.013724 train acc = 1.0000, test acc = 0.2610
[2022-11-29 18:59:42] Evaluate_02: epoch = 1000 train time = 456 s train loss = 0.034573 train acc = 0.9981, test acc = 0.2616
Evaluate 3 random ConvNet, mean = 0.2623 std = 0.0014

-----------------------------
method random seed 2 step 4 
classes_seen:  [83, 30, 56, 24, 16, 23, 2, 27, 28, 13, 99, 92, 76, 14, 0, 21, 3, 29, 61, 79, 35, 11, 84, 44, 73, 5, 25, 77, 74, 62, 65, 1, 18, 48, 36, 78, 6, 89, 91, 10, 12, 53, 87, 54, 95, 32, 19, 26, 60, 55, 9, 96, 17, 59, 57, 41, 64, 45, 97, 8, 71, 94, 90, 98, 86, 80, 50, 52, 66, 88, 70, 46, 68, 69, 81, 58, 33, 38, 51, 42, 4, 67, 39, 37, 20, 31, 63, 47, 85, 93, 49, 34, 7, 75, 82, 43, 22, 72, 15, 40]
train data size:  torch.Size([2000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-11-29 19:09:11] Evaluate_00: epoch = 1000 train time = 561 s train loss = 0.022617 train acc = 0.9985, test acc = 0.2430
[2022-11-29 19:18:39] Evaluate_01: epoch = 1000 train time = 567 s train loss = 0.016442 train acc = 1.0000, test acc = 0.2461
[2022-11-29 19:27:45] Evaluate_02: epoch = 1000 train time = 544 s train loss = 0.029896 train acc = 0.9990, test acc = 0.2440
Evaluate 3 random ConvNet, mean = 0.2444 std = 0.0013
=========================================
seed:  3
class_order:  [93, 67, 6, 64, 96, 83, 98, 42, 25, 15, 77, 9, 71, 97, 34, 75, 82, 23, 59, 45, 73, 12, 8, 4, 79, 86, 17, 65, 47, 50, 30, 5, 13, 31, 88, 11, 58, 85, 32, 40, 16, 27, 35, 36, 92, 90, 78, 76, 68, 46, 53, 70, 80, 61, 18, 91, 57, 95, 54, 55, 28, 52, 84, 89, 49, 87, 37, 48, 33, 43, 7, 62, 99, 29, 69, 51, 1, 60, 63, 2, 66, 22, 81, 26, 14, 39, 44, 20, 38, 94, 10, 41, 74, 19, 21, 0, 72, 56, 3, 24]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}

-----------------------------
method random seed 3 step 0 
classes_seen:  [93, 67, 6, 64, 96, 83, 98, 42, 25, 15, 77, 9, 71, 97, 34, 75, 82, 23, 59, 45]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-11-29 19:29:43] Evaluate_00: epoch = 1000 train time = 114 s train loss = 0.011431 train acc = 1.0000, test acc = 0.3955
[2022-11-29 19:31:21] Evaluate_01: epoch = 1000 train time = 97 s train loss = 0.007506 train acc = 1.0000, test acc = 0.4000
[2022-11-29 19:33:07] Evaluate_02: epoch = 1000 train time = 106 s train loss = 0.001234 train acc = 1.0000, test acc = 0.3965
Evaluate 3 random ConvNet, mean = 0.3973 std = 0.0019

-----------------------------
method random seed 3 step 1 
classes_seen:  [93, 67, 6, 64, 96, 83, 98, 42, 25, 15, 77, 9, 71, 97, 34, 75, 82, 23, 59, 45, 73, 12, 8, 4, 79, 86, 17, 65, 47, 50, 30, 5, 13, 31, 88, 11, 58, 85, 32, 40]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-11-29 19:36:58] Evaluate_00: epoch = 1000 train time = 225 s train loss = 0.012903 train acc = 1.0000, test acc = 0.3095
[2022-11-29 19:40:49] Evaluate_01: epoch = 1000 train time = 230 s train loss = 0.027975 train acc = 0.9988, test acc = 0.3172
[2022-11-29 19:44:41] Evaluate_02: epoch = 1000 train time = 231 s train loss = 0.008856 train acc = 1.0000, test acc = 0.3172
Evaluate 3 random ConvNet, mean = 0.3147 std = 0.0037

-----------------------------
method random seed 3 step 2 
classes_seen:  [93, 67, 6, 64, 96, 83, 98, 42, 25, 15, 77, 9, 71, 97, 34, 75, 82, 23, 59, 45, 73, 12, 8, 4, 79, 86, 17, 65, 47, 50, 30, 5, 13, 31, 88, 11, 58, 85, 32, 40, 16, 27, 35, 36, 92, 90, 78, 76, 68, 46, 53, 70, 80, 61, 18, 91, 57, 95, 54, 55]
train data size:  torch.Size([1200, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-11-29 19:50:29] Evaluate_00: epoch = 1000 train time = 343 s train loss = 0.019924 train acc = 0.9992, test acc = 0.2720
[2022-11-29 19:55:50] Evaluate_01: epoch = 1000 train time = 319 s train loss = 0.007179 train acc = 1.0000, test acc = 0.2815
[2022-11-29 20:01:26] Evaluate_02: epoch = 1000 train time = 335 s train loss = 0.019019 train acc = 1.0000, test acc = 0.2820
Evaluate 3 random ConvNet, mean = 0.2785 std = 0.0046

-----------------------------
method random seed 3 step 3 
classes_seen:  [93, 67, 6, 64, 96, 83, 98, 42, 25, 15, 77, 9, 71, 97, 34, 75, 82, 23, 59, 45, 73, 12, 8, 4, 79, 86, 17, 65, 47, 50, 30, 5, 13, 31, 88, 11, 58, 85, 32, 40, 16, 27, 35, 36, 92, 90, 78, 76, 68, 46, 53, 70, 80, 61, 18, 91, 57, 95, 54, 55, 28, 52, 84, 89, 49, 87, 37, 48, 33, 43, 7, 62, 99, 29, 69, 51, 1, 60, 63, 2]
train data size:  torch.Size([1600, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-11-29 20:09:02] Evaluate_00: epoch = 1000 train time = 448 s train loss = 0.013263 train acc = 1.0000, test acc = 0.2572
[2022-11-29 20:16:03] Evaluate_01: epoch = 1000 train time = 419 s train loss = 0.018799 train acc = 0.9969, test acc = 0.2659
[2022-11-29 20:23:13] Evaluate_02: epoch = 1000 train time = 429 s train loss = 0.041392 train acc = 0.9981, test acc = 0.2642
Evaluate 3 random ConvNet, mean = 0.2625 std = 0.0037

-----------------------------
method random seed 3 step 4 
classes_seen:  [93, 67, 6, 64, 96, 83, 98, 42, 25, 15, 77, 9, 71, 97, 34, 75, 82, 23, 59, 45, 73, 12, 8, 4, 79, 86, 17, 65, 47, 50, 30, 5, 13, 31, 88, 11, 58, 85, 32, 40, 16, 27, 35, 36, 92, 90, 78, 76, 68, 46, 53, 70, 80, 61, 18, 91, 57, 95, 54, 55, 28, 52, 84, 89, 49, 87, 37, 48, 33, 43, 7, 62, 99, 29, 69, 51, 1, 60, 63, 2, 66, 22, 81, 26, 14, 39, 44, 20, 38, 94, 10, 41, 74, 19, 21, 0, 72, 56, 3, 24]
train data size:  torch.Size([2000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-11-29 20:32:25] Evaluate_00: epoch = 1000 train time = 542 s train loss = 0.012965 train acc = 1.0000, test acc = 0.2581
[2022-11-29 20:41:32] Evaluate_01: epoch = 1000 train time = 545 s train loss = 0.010997 train acc = 0.9995, test acc = 0.2468
[2022-11-29 20:50:41] Evaluate_02: epoch = 1000 train time = 547 s train loss = 0.019217 train acc = 0.9985, test acc = 0.2485
Evaluate 3 random ConvNet, mean = 0.2511 std = 0.0050
=========================================
seed:  4
class_order:  [20, 10, 96, 16, 63, 24, 53, 97, 41, 47, 43, 2, 95, 26, 13, 37, 14, 29, 35, 54, 80, 4, 81, 76, 85, 60, 5, 70, 71, 19, 65, 62, 27, 75, 61, 78, 18, 88, 7, 39, 6, 77, 11, 59, 22, 94, 23, 12, 92, 25, 83, 48, 17, 68, 31, 34, 15, 51, 86, 82, 28, 64, 67, 33, 45, 42, 40, 32, 91, 74, 49, 8, 30, 99, 66, 56, 84, 73, 79, 21, 89, 0, 3, 52, 38, 44, 93, 36, 57, 90, 98, 58, 9, 50, 72, 87, 1, 69, 55, 46]
augmentation strategy: 
 color_crop_cutout_flip_scale_rotate
augmentation parameters: 
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5, 'Siamese': False, 'latestseed': -1}

-----------------------------
method random seed 4 step 0 
classes_seen:  [20, 10, 96, 16, 63, 24, 53, 97, 41, 47, 43, 2, 95, 26, 13, 37, 14, 29, 35, 54]
train data size:  torch.Size([400, 3, 32, 32])
test set size:  torch.Size([2000, 3, 32, 32])
[2022-11-29 20:52:37] Evaluate_00: epoch = 1000 train time = 112 s train loss = 0.006694 train acc = 1.0000, test acc = 0.4505
[2022-11-29 20:54:24] Evaluate_01: epoch = 1000 train time = 106 s train loss = 0.006014 train acc = 1.0000, test acc = 0.4800
[2022-11-29 20:56:19] Evaluate_02: epoch = 1000 train time = 114 s train loss = 0.011670 train acc = 1.0000, test acc = 0.4675
Evaluate 3 random ConvNet, mean = 0.4660 std = 0.0121

-----------------------------
method random seed 4 step 1 
classes_seen:  [20, 10, 96, 16, 63, 24, 53, 97, 41, 47, 43, 2, 95, 26, 13, 37, 14, 29, 35, 54, 80, 4, 81, 76, 85, 60, 5, 70, 71, 19, 65, 62, 27, 75, 61, 78, 18, 88, 7, 39]
train data size:  torch.Size([800, 3, 32, 32])
test set size:  torch.Size([4000, 3, 32, 32])
[2022-11-29 21:00:17] Evaluate_00: epoch = 1000 train time = 232 s train loss = 0.011383 train acc = 1.0000, test acc = 0.3653
[2022-11-29 21:04:08] Evaluate_01: epoch = 1000 train time = 230 s train loss = 0.005567 train acc = 1.0000, test acc = 0.3640
[2022-11-29 21:07:47] Evaluate_02: epoch = 1000 train time = 218 s train loss = 0.028072 train acc = 0.9962, test acc = 0.3563
Evaluate 3 random ConvNet, mean = 0.3618 std = 0.0040

-----------------------------
method random seed 4 step 2 
classes_seen:  [20, 10, 96, 16, 63, 24, 53, 97, 41, 47, 43, 2, 95, 26, 13, 37, 14, 29, 35, 54, 80, 4, 81, 76, 85, 60, 5, 70, 71, 19, 65, 62, 27, 75, 61, 78, 18, 88, 7, 39, 6, 77, 11, 59, 22, 94, 23, 12, 92, 25, 83, 48, 17, 68, 31, 34, 15, 51, 86, 82]
train data size:  torch.Size([1200, 3, 32, 32])
test set size:  torch.Size([6000, 3, 32, 32])
[2022-11-29 21:13:07] Evaluate_00: epoch = 1000 train time = 315 s train loss = 0.031686 train acc = 1.0000, test acc = 0.3197
[2022-11-29 21:18:40] Evaluate_01: epoch = 1000 train time = 332 s train loss = 0.008896 train acc = 1.0000, test acc = 0.3258
[2022-11-29 21:24:20] Evaluate_02: epoch = 1000 train time = 338 s train loss = 0.017895 train acc = 0.9992, test acc = 0.3255
Evaluate 3 random ConvNet, mean = 0.3237 std = 0.0028

-----------------------------
method random seed 4 step 3 
classes_seen:  [20, 10, 96, 16, 63, 24, 53, 97, 41, 47, 43, 2, 95, 26, 13, 37, 14, 29, 35, 54, 80, 4, 81, 76, 85, 60, 5, 70, 71, 19, 65, 62, 27, 75, 61, 78, 18, 88, 7, 39, 6, 77, 11, 59, 22, 94, 23, 12, 92, 25, 83, 48, 17, 68, 31, 34, 15, 51, 86, 82, 28, 64, 67, 33, 45, 42, 40, 32, 91, 74, 49, 8, 30, 99, 66, 56, 84, 73, 79, 21]
train data size:  torch.Size([1600, 3, 32, 32])
test set size:  torch.Size([8000, 3, 32, 32])
[2022-11-29 21:31:58] Evaluate_00: epoch = 1000 train time = 451 s train loss = 0.013640 train acc = 0.9994, test acc = 0.2776
[2022-11-29 21:39:04] Evaluate_01: epoch = 1000 train time = 425 s train loss = 0.018551 train acc = 0.9988, test acc = 0.2895
[2022-11-29 21:46:41] Evaluate_02: epoch = 1000 train time = 456 s train loss = 0.011007 train acc = 1.0000, test acc = 0.2851
Evaluate 3 random ConvNet, mean = 0.2841 std = 0.0049

-----------------------------
method random seed 4 step 4 
classes_seen:  [20, 10, 96, 16, 63, 24, 53, 97, 41, 47, 43, 2, 95, 26, 13, 37, 14, 29, 35, 54, 80, 4, 81, 76, 85, 60, 5, 70, 71, 19, 65, 62, 27, 75, 61, 78, 18, 88, 7, 39, 6, 77, 11, 59, 22, 94, 23, 12, 92, 25, 83, 48, 17, 68, 31, 34, 15, 51, 86, 82, 28, 64, 67, 33, 45, 42, 40, 32, 91, 74, 49, 8, 30, 99, 66, 56, 84, 73, 79, 21, 89, 0, 3, 52, 38, 44, 93, 36, 57, 90, 98, 58, 9, 50, 72, 87, 1, 69, 55, 46]
train data size:  torch.Size([2000, 3, 32, 32])
test set size:  torch.Size([10000, 3, 32, 32])
[2022-11-29 21:55:48] Evaluate_00: epoch = 1000 train time = 539 s train loss = 0.024145 train acc = 0.9985, test acc = 0.2507
[2022-11-29 22:05:22] Evaluate_01: epoch = 1000 train time = 572 s train loss = 0.037138 train acc = 0.9990, test acc = 0.2545
[2022-11-29 22:14:51] Evaluate_02: epoch = 1000 train time = 567 s train loss = 0.015769 train acc = 0.9995, test acc = 0.2515
Evaluate 3 random ConvNet, mean = 0.2522 std = 0.0016



5 step learning random perforamnce:
& 43.4$\pm$2.9  & 33.2$\pm$2.4  & 30.0$\pm$2.0  & 27.1$\pm$1.0  & 24.8$\pm$0.5  
Done
